{-
  Id: stl:FjjU0$$o-dgf5dmK-ohaEobc-Y6Vz3rp-TqLj3kS-8F7NMQQ#capsule-arthur-quest
  Name: RGBCommit
  Version: 0.1.0
  Description: Consensus commitment layer for RGB smart contracts
  Author: Dr Maxim Orlovsky <orlovsky@lnp-bp.org>
  Copyright (C) 2023-2024 LNP/BP Standards Association. All rights reserved.
  License: Apache-2.0
-}

@context
typelib RGBCommit

import BPCore#symbol-tropic-grand
  use BlindSealTxid#halt-crash-valid
  use SecretSeal#dollar-iris-wizard
  use BlindSealTxPtr#content-paradox-dominic
  use TxPtr#italian-july-eddie

import StrictTypes#century-comrade-chess
  use TypeName#edgar-carol-mystery
  use SemId#logic-absorb-hilton

import AluVM#congo-archive-folio
  use LibSite#ultra-grace-message
  use LibId#germany-culture-olivia

import CommitVerify#miller-pancake-elastic
  use MerkleHash#horse-popcorn-bundle
  use StrictHash#pizza-sherman-sound
  use ReservedBytes1#origin-roger-relax
  use ReservedBytes2#florida-libra-circus
  use ReservedBytes8#rudolf-tape-adrian

import Std#ralph-blue-lucky
  use AsciiPrintable#ultra-sunset-format
  use Bool#oxygen-complex-duet
  use AlphaNumLodash#percent-bingo-caesar
  use AlphaCapsLodash#duet-hammer-labor

import Bitcoin#signal-color-cipher
  use Vout#brush-gloria-heroic
  use Txid#shallow-light-reverse


@mnemonic(credit-cycle-panama)
data AssignRevealedAttachBlindSealTxPtr : confidential (seal BPCore.SecretSeal
                       , state ConcealedAttach
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxPtr
                       , state ConcealedAttach
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state RevealedAttach
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxPtr
                       , state RevealedAttach
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(volcano-chariot-plastic)
data AssignRevealedAttachBlindSealTxid : confidential (seal BPCore.SecretSeal
                       , state ConcealedAttach
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxid
                       , state ConcealedAttach
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state RevealedAttach
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxid
                       , state RevealedAttach
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(sweden-alpine-quality)
data AssignRevealedDataBlindSealTxPtr : confidential (seal BPCore.SecretSeal
                       , state ConcealedData
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxPtr
                       , state ConcealedData
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state RevealedData
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxPtr
                       , state RevealedData
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(break-python-verona)
data AssignRevealedDataBlindSealTxid : confidential (seal BPCore.SecretSeal
                       , state ConcealedData
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxid
                       , state ConcealedData
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state RevealedData
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxid
                       , state RevealedData
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(basic-elastic-digital)
data AssignRevealedValueBlindSealTxPtr : confidential (seal BPCore.SecretSeal
                       , state ConcealedFungible
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxPtr
                       , state ConcealedFungible
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state RevealedFungible
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxPtr
                       , state RevealedFungible
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(example-reply-lorenzo)
data AssignRevealedValueBlindSealTxid : confidential (seal BPCore.SecretSeal
                       , state ConcealedFungible
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxid
                       , state ConcealedFungible
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state RevealedFungible
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxid
                       , state RevealedFungible
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(snow-adrian-cadet)
data AssignVoidStateBlindSealTxPtr : confidential (seal BPCore.SecretSeal
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxPtr
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxPtr
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(drum-cover-between)
data AssignVoidStateBlindSealTxid : confidential (seal BPCore.SecretSeal
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialState (seal BPCore.BlindSealTxid
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)
                       | confidentialSeal (seal BPCore.SecretSeal
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)
                       | revealed (seal BPCore.BlindSealTxid
                       , state VoidState
                       , lock CommitVerify.ReservedBytes2)

@mnemonic(secret-penguin-limit)
data AssignmentType    : U16

@mnemonic(target-valid-tiger)
data AssignmentsBlindSealTxPtr : {AssignmentType -> ^ ..0xff TypedAssignsBlindSealTxPtr}

@mnemonic(baker-size-sonar)
data AssignmentsBlindSealTxid : {AssignmentType -> ^ ..0xff TypedAssignsBlindSealTxid}

@mnemonic(factor-hair-everest)
data AttachId          : [Byte ^ 32]

@mnemonic(harvard-burma-bicycle)
data AttachState       : id AttachId, mediaType MediaType

@mnemonic(bagel-ground-provide)
data BaseCommitment    : flags CommitVerify.ReservedBytes1
                       , schemaId SchemaId
                       , timestamp I64
                       , issuer CommitVerify.StrictHash
                       , layer1 Layer1
                       , testnet Std.Bool

@mnemonic(meter-arizona-albino)
data ConcealedAttach   : [Byte ^ 32]

@mnemonic(ivan-tripod-young)
data ConcealedData     : [Byte ^ 32]

@mnemonic(justice-border-griffin)
data ConcealedFungible : value FungibleState, concealedDummy ()

@mnemonic(uniform-welcome-papa)
data ContractId        : [Byte ^ 32]

@mnemonic(short-noise-postal)
data DataState         : [Byte]

@mnemonic(reform-garden-ballet)
data Extension         : ffv Ffv
                       , contractId ContractId
                       , nonce U64
                       , extensionType ExtensionType
                       , metadata Metadata
                       , globals GlobalState
                       , assignments AssignmentsBlindSealTxid
                       , redeemed Redeemed
                       , valencies Valencies
                       , validator CommitVerify.ReservedBytes1
                       , witness CommitVerify.ReservedBytes2

@mnemonic(delta-elastic-germany)
data ExtensionSchema   : metadata {MetaType ^ ..0xff}
                       , globals {GlobalStateType -> ^ ..0xff Occurrences}
                       , redeems {ValencyType ^ ..0xff}
                       , assignments {AssignmentType -> ^ ..0xff Occurrences}
                       , valencies {ValencyType ^ ..0xff}
                       , validator AluVM.LibSite?

@mnemonic(apropos-scoop-viva)
data ExtensionType     : U16

@mnemonic(pigment-career-hippie)
data Ffv               : U16

@mnemonic(guide-poker-coconut)
data FungibleState     : bits64#8 U64 | (|)

@mnemonic(matrix-optimal-sinatra)
data FungibleType      : unsigned64Bit#8 | (|)


@mnemonic(friday-cliff-ticket)
data Genesis           : ffv Ffv
                       , schemaId SchemaId
                       , flags CommitVerify.ReservedBytes1
                       , timestamp I64
                       , issuer Identity
                       , layer1 Layer1
                       , testnet Std.Bool
                       , metadata Metadata
                       , globals GlobalState
                       , assignments AssignmentsBlindSealTxid
                       , valencies Valencies
                       , validator CommitVerify.ReservedBytes1

@mnemonic(concept-gloria-shock)
data GenesisSchema     : metadata {MetaType ^ ..0xff}
                       , globals {GlobalStateType -> ^ ..0xff Occurrences}
                       , assignments {AssignmentType -> ^ ..0xff Occurrences}
                       , valencies {ValencyType ^ ..0xff}
                       , validator AluVM.LibSite?

@mnemonic(initial-malta-sierra)
data GlobalState       : {GlobalStateType -> ^ ..0xff GlobalValues}

@mnemonic(silk-college-august)
data GlobalStateSchema : reserved CommitVerify.ReservedBytes1
                       , semId StrictTypes.SemId
                       , maxItems U24

@mnemonic(yoga-quick-jasmine)
data GlobalStateType   : U16

@mnemonic(charter-fractal-maze)
data GlobalValues      : [DataState ^ 1..]

@mnemonic(smart-pioneer-nominal)
data Identity          : Std.AsciiPrintable, [Std.AsciiPrintable ^ ..0xfff]

@mnemonic(kevin-morgan-shrink)
data Input             : prevOut Opout, reserved CommitVerify.ReservedBytes2

@mnemonic(tobacco-open-join)
data InputMap          : {Bitcoin.Vout -> ^ 1.. OpId}

@mnemonic(sector-charlie-diagram)
data Inputs            : {Input}

@mnemonic(camilla-basket-justin)
data Layer1            : bitcoin | liquid


@mnemonic(isabel-heaven-north)
data MediaType         : any#255 | (|)


@mnemonic(quebec-mission-quota)
data MetaType          : U16

@mnemonic(split-package-recycle)
data MetaValue         : [Byte]

@mnemonic(retro-mozart-formal)
data Metadata          : {MetaType -> ^ ..0xff MetaValue}

@mnemonic(source-olga-mirage)
data Occurrences       : min U16, max U16

@mnemonic(survive-citizen-harris)
data OpCommitment      : ffv Ffv
                       , nonce U64
                       , opType TypeCommitment
                       , metadata CommitVerify.StrictHash
                       , globals CommitVerify.MerkleHash
                       , inputs CommitVerify.MerkleHash
                       , assignments CommitVerify.MerkleHash
                       , redeemed CommitVerify.StrictHash
                       , valencies CommitVerify.StrictHash
                       , witness CommitVerify.MerkleHash
                       , validator CommitVerify.StrictHash

@mnemonic(picnic-single-gloria)
data OpId              : [Byte ^ 32]

@mnemonic(child-morning-compare)
data Opout             : op OpId
                       , ty AssignmentType
                       , no U16

@mnemonic(neutral-mixer-visual)
data OwnedStateSchema  : declarative ()
                       | fungible FungibleType
                       | structured StrictTypes.SemId
                       | attachment MediaType

@mnemonic(anita-vega-pirate)
data Redeemed          : {ValencyType -> ^ ..0xff OpId}

@mnemonic(simple-bombay-salute)
data RevealedAttach    : file AttachState, salt U64

@mnemonic(sleep-source-figure)
data RevealedData      : value DataState, salt U128

@mnemonic(escape-nylon-client)
data RevealedFungible  : value FungibleState

@mnemonic(corona-igloo-sierra)
data Schema            : ffv Ffv
                       , flags CommitVerify.ReservedBytes1
                       , name StrictTypes.TypeName
                       , timestamp I64
                       , developer Identity
                       , metaTypes {MetaType -> ^ ..0xff StrictTypes.SemId}
                       , globalTypes {GlobalStateType -> ^ ..0xff GlobalStateSchema}
                       , ownedTypes {AssignmentType -> ^ ..0xff OwnedStateSchema}
                       , valencyTypes {ValencyType ^ ..0xff}
                       , genesis GenesisSchema
                       , extensions {ExtensionType -> ^ ..0xff ExtensionSchema}
                       , transitions {TransitionType -> ^ ..0xff TransitionSchema}
                       , reserved CommitVerify.ReservedBytes8

@mnemonic(ramirez-patron-simon)
data SchemaId          : [Byte ^ 32]

@mnemonic(michael-exact-eric)
data Transition        : ffv Ffv
                       , contractId ContractId
                       , nonce U64
                       , transitionType TransitionType
                       , metadata Metadata
                       , globals GlobalState
                       , inputs Inputs
                       , assignments AssignmentsBlindSealTxPtr
                       , valencies Valencies
                       , validator CommitVerify.ReservedBytes1
                       , witness CommitVerify.ReservedBytes2

@mnemonic(rider-serpent-algebra)
data TransitionBundle  : inputMap InputMap, knownTransitions {OpId -> ^ 1.. Transition}

@mnemonic(pirate-lithium-side)
data TransitionSchema  : metadata {MetaType ^ ..0xff}
                       , globals {GlobalStateType -> ^ ..0xff Occurrences}
                       , inputs {AssignmentType -> ^ ..0xff Occurrences}
                       , assignments {AssignmentType -> ^ ..0xff Occurrences}
                       , valencies {ValencyType ^ ..0xff}
                       , validator AluVM.LibSite?

@mnemonic(picture-reflex-brigade)
data TransitionType    : U16

@mnemonic(biscuit-pandora-bagel)
data TypeCommitment    : genesis BaseCommitment
                       | transition (ContractId, TransitionType)
                       | extension (ContractId, ExtensionType)

@mnemonic(giant-trinity-lagoon)
data TypedAssignsBlindSealTxPtr : declarative [AssignVoidStateBlindSealTxPtr]
                       | fungible [AssignRevealedValueBlindSealTxPtr]
                       | structured [AssignRevealedDataBlindSealTxPtr]
                       | attachment#255 [AssignRevealedAttachBlindSealTxPtr]

@mnemonic(penguin-raja-machine)
data TypedAssignsBlindSealTxid : declarative [AssignVoidStateBlindSealTxid]
                       | fungible [AssignRevealedValueBlindSealTxid]
                       | structured [AssignRevealedDataBlindSealTxid]
                       | attachment#255 [AssignRevealedAttachBlindSealTxid]

@mnemonic(shock-jester-orion)
data Valencies         : {ValencyType ^ ..0xff}

@mnemonic(aloha-dublin-brush)
data ValencyType       : U16

@mnemonic(email-snow-safari)
data VoidState         : ()


